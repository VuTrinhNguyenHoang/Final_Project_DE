[2024-05-05T18:50:51.010+0000] {local_task_job_runner.py:120} INFO - ::group::Pre task execution logs
[2024-05-05T18:50:51.027+0000] {taskinstance.py:2073} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: Final_exam.clean_data manual__2024-05-05T18:50:36.842346+00:00 [queued]>
[2024-05-05T18:50:51.033+0000] {taskinstance.py:2073} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: Final_exam.clean_data manual__2024-05-05T18:50:36.842346+00:00 [queued]>
[2024-05-05T18:50:51.033+0000] {taskinstance.py:2303} INFO - Starting attempt 1 of 2
[2024-05-05T18:50:51.043+0000] {taskinstance.py:2327} INFO - Executing <Task(PythonOperator): clean_data> on 2024-05-05 18:50:36.842346+00:00
[2024-05-05T18:50:51.049+0000] {warnings.py:110} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:61: DeprecationWarning: This process (pid=100) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-05-05T18:50:51.050+0000] {standard_task_runner.py:63} INFO - Started process 102 to run task
[2024-05-05T18:50:51.050+0000] {standard_task_runner.py:90} INFO - Running: ['***', 'tasks', 'run', 'Final_exam', 'clean_data', 'manual__2024-05-05T18:50:36.842346+00:00', '--job-id', '25', '--raw', '--subdir', 'DAGS_FOLDER/Project.py', '--cfg-path', '/tmp/tmp2hx8fehv']
[2024-05-05T18:50:51.051+0000] {standard_task_runner.py:91} INFO - Job 25: Subtask clean_data
[2024-05-05T18:50:51.086+0000] {task_command.py:426} INFO - Running <TaskInstance: Final_exam.clean_data manual__2024-05-05T18:50:36.842346+00:00 [running]> on host 0d2f9ca33b23
[2024-05-05T18:50:51.146+0000] {taskinstance.py:2644} INFO - Exporting env vars: AIRFLOW_CTX_DAG_EMAIL='ha20040204@gmail.com' AIRFLOW_CTX_DAG_OWNER='HA' AIRFLOW_CTX_DAG_ID='Final_exam' AIRFLOW_CTX_TASK_ID='clean_data' AIRFLOW_CTX_EXECUTION_DATE='2024-05-05T18:50:36.842346+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-05-05T18:50:36.842346+00:00'
[2024-05-05T18:50:51.147+0000] {taskinstance.py:430} INFO - ::endgroup::
[2024-05-05T18:50:51.165+0000] {warnings.py:110} WARNING - /opt/***/dags/Project.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-05-05T18:50:51.166+0000] {warnings.py:110} WARNING - /opt/***/dags/Project.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-05-05T18:50:52.399+0000] {warnings.py:110} WARNING - /opt/***/dags/Project.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-05-05T18:50:52.399+0000] {warnings.py:110} WARNING - /opt/***/dags/Project.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-05-05T18:50:53.463+0000] {warnings.py:110} WARNING - /opt/***/dags/Project.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-05-05T18:50:53.463+0000] {warnings.py:110} WARNING - /opt/***/dags/Project.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-05-05T18:50:54.051+0000] {warnings.py:110} WARNING - /opt/***/dags/Project.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-05-05T18:50:54.052+0000] {warnings.py:110} WARNING - /opt/***/dags/Project.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-05-05T18:50:54.777+0000] {warnings.py:110} WARNING - /opt/***/dags/Project.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-05-05T18:50:54.778+0000] {warnings.py:110} WARNING - /opt/***/dags/Project.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-05-05T18:50:55.146+0000] {warnings.py:110} WARNING - /opt/***/dags/Project.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-05-05T18:50:55.147+0000] {warnings.py:110} WARNING - /opt/***/dags/Project.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-05-05T18:50:56.672+0000] {warnings.py:110} WARNING - /opt/***/dags/Project.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-05-05T18:50:56.673+0000] {warnings.py:110} WARNING - /opt/***/dags/Project.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-05-05T18:50:57.746+0000] {warnings.py:110} WARNING - /opt/***/dags/Project.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-05-05T18:50:57.746+0000] {warnings.py:110} WARNING - /opt/***/dags/Project.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-05-05T18:50:59.038+0000] {warnings.py:110} WARNING - /opt/***/dags/Project.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-05-05T18:50:59.039+0000] {warnings.py:110} WARNING - /opt/***/dags/Project.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-05-05T18:51:00.560+0000] {warnings.py:110} WARNING - /opt/***/dags/Project.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-05-05T18:51:00.561+0000] {warnings.py:110} WARNING - /opt/***/dags/Project.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-05-05T18:51:00.808+0000] {warnings.py:110} WARNING - /opt/***/dags/Project.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-05-05T18:51:00.809+0000] {warnings.py:110} WARNING - /opt/***/dags/Project.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-05-05T18:51:00.913+0000] {warnings.py:110} WARNING - /opt/***/dags/Project.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-05-05T18:51:00.913+0000] {warnings.py:110} WARNING - /opt/***/dags/Project.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-05-05T18:51:01.317+0000] {warnings.py:110} WARNING - /opt/***/dags/Project.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-05-05T18:51:01.318+0000] {warnings.py:110} WARNING - /opt/***/dags/Project.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-05-05T18:51:01.588+0000] {warnings.py:110} WARNING - /opt/***/dags/Project.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-05-05T18:51:01.589+0000] {warnings.py:110} WARNING - /opt/***/dags/Project.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-05-05T18:51:01.752+0000] {logging_mixin.py:188} INFO - Successfully.
[2024-05-05T18:51:01.753+0000] {python.py:237} INFO - Done. Returned value was: True
[2024-05-05T18:51:01.754+0000] {taskinstance.py:441} INFO - ::group::Post task execution logs
[2024-05-05T18:51:01.769+0000] {taskinstance.py:1205} INFO - Marking task as SUCCESS. dag_id=Final_exam, task_id=clean_data, execution_date=20240505T185036, start_date=20240505T185051, end_date=20240505T185101
[2024-05-05T18:51:01.798+0000] {local_task_job_runner.py:240} INFO - Task exited with return code 0
[2024-05-05T18:51:01.815+0000] {taskinstance.py:3482} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-05-05T18:51:01.816+0000] {local_task_job_runner.py:222} INFO - ::endgroup::
